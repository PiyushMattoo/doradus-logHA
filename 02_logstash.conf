# See http://logstash.net/docs/latest/ for documentation on how to configure Logstash.

input {
    redis { 
	    host => "redis" 
		data_type => "list" 
		key => "logstash-apache" 
		  }
	redis { 
	    host => "redis" 
		data_type => "list" 
		key => "logstash-haproxy" 
		  }
	redis { 
	    host => "redis" 
		data_type => "list" 
		key => "logstash-jboss" 
		  }
	redis { 
	    host => "redis" 
		data_type => "list" 
		key => "logstash-default" 
		  }
}

filter {
   ruby {
      code => "require 'base64';
	  event['enccred'] = Base64.encode64(ENV['DOCKER_DORADUS_USER'].to_s + ':' + ENV['DOCKER_DORADUS_PWD'].to_s).gsub(/\n/, '');
	  event['post_url'] = ENV['DORADUS_HOST'].to_s + ':' + ENV['DORADUS_PORT'].to_s + '/LoggingApplication/logs_' + ENV['DOCKER_APP_NAME'].to_s + '_' + ENV['DOCKER_NAMESPACE'].to_s"
   
   }

}

output {
    if [type] == "apache" {
		batched_http {
			http_method => "post"
			url => "%{post_url}"
			format => "message"
			headers => ["Authorization","Basic %{enccred}"]
			content_type => "application/json"
			batched => '{ "doc": { "Timestamp": "%{Timestamp}", "LogMessage": "%{message}", "Source": "%{filename}" } }'
			message => '{"batch": { "docs": [ %{batched} ] } }'
		}
	} else if [type] == "haproxy" {
		batched_http {
			http_method => "post"
			url => "%{post_url}"
			format => "message"
			headers => ["Authorization","Basic %{enccred}"]
			content_type => "application/json"
			batched => '{ "doc": { "Timestamp": "%{Timestamp}", "LogMessage": "%{message}", "Source": "%{filename}" } }'
			message => '{"batch": { "docs": [ %{batched} ] } }'
		}
	} else if [type] == "jboss" {
		batched_http {
			http_method => "post"
			url => "%{post_url}"
			format => "message"
			headers => ["Authorization","Basic %{enccred}"]
			content_type => "application/json"
			batched => '{ "doc": { "Timestamp": "%{Timestamp}", "LogLevel": "%{level}","LogMessage": "%{logmessage}", "Source": "%{filename}" } }'
			message => '{"batch": { "docs": [ %{batched} ] } }'
		}
	} else if [type] == "default" {
        batched_http {
			http_method => "post"
			url => "%{post_url}"
			format => "message"
			headers => ["Authorization","Basic %{enccred}"]
			content_type => "application/json"
			batched => '{ "doc": { "Timestamp": "%{Timestamp}", "LogLevel": "%{level}","LogMessage": "%{message}", "Source": "%{filename}" } }'
			message => '{"batch": { "docs": [ %{batched} ] } }'
		}
      }	
}